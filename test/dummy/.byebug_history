c
ObjectSpace.each_object(ActionDispatch::Session)
ObjectSpace.each_object(ActionDispatch::Session).first
ObjectSpace.each_object(ActionDispatch::Routing::RouteSet).first
ObjectSpace.each_object(ActionDispatch::Routing::RouteSet).count
ObjectSpace.each_object(ActionController::Base).count
ObjectSpace.each_object(ActionController::Base) {|x| puts x}
ObjectSpace.each_object(ActionController::Base) {|x| p x}
ObjectSpace.each_object(ApplicationController) {|x| p x}
ObjectSpace.each_object(ApplicationController) {|x| x}
ObjectSpace.each_object(ApplicationController)
ActionDispatch::Routing::RouteSet.instances
ActionDispatch::Routing::RouteSet.children
ActionDispatch::Routing::RouteSet.parent
ActionDispatch::Routing::RouteSet.ancestors
ActionDispatch::Routing::RouteSet.anscestors
ActionDispatch::Routing::RouteSet.descendants
ActionDispatch::Routing::RouteSet.descendents
ActionDispatch::Routing::RouteSet.methods
@app.class.module
@app.class.class
@app.class
@app.parent
@app.methods
@app.keys
@app
env['rack.input']
env['rack.run_once']
env['warden']
env.warden
env.keys
c
response
response.to_ary
response.methods
response.params
reponse.params
response.keys
response['params']
reponse['params']
response
c
env['action_controller.instance']
env
@current_action
@current_controller
c
request.params
c
request.params
c
request.params
c
request.params
c
env['params']
params
c
env['authoreyes.authorized?']
env.keys
c
TestModelsController.action(:index).call(env)
TestModelsController.action(:index)
controller.action(:index)
controller
@current_controller.action(:index)
ApplicationController.redirect_back
env['action_dispatch.routes'].methods
env['action_dispatch.routes'].recognize_path env['HTTP_REFERER']
env['action_dispatch.routes'].recognize_path
env['action_dispatch.routes'].class
env.keys
env['action_dispatch.routing']
env['action_dispatch.router']
env['action_dispatch.route_set']
env['action_dispatch.route_set
ActionDispatch::Routing::RouteSet.recognize_path
ActionDispatch::Routing::Routes
ActionDispatch::Routing
ActionController::Routing::Routes.recognize_path
controller = env['action_controller.instance']
@controller
controller
exit
c
env['PATH_INFO'] = '/test_models/1'
env['PATH_INFO'] = '/'
c
@app.call(env)
env['action_dispatch.flash'] = {alert: 'You are not allowed to do that.'}
env['action_dispatch.flash']
env
env.grep 'rack'
env.grep 'flash'
env.grep /flash/
env.keys
env['PATH_INFO'] = URI(request.referer).path
URI(request.referer).path
env['HTTP_REFERER']
env['HTTP_REFERER'].slice! 'http://'
env['HTTP_REFERER']
env['HTTP_REFERER'].slice! env['HTTP_HOST']
env['HTTP_REFERER'] - env['HTTP_HOST']
env['HTTP_REFERER'] - env['HOST']
env['PATH_INFO']
env['HTTP_REFERER']
env.keys
env['request.path']
env['path']
request.path = request.referer
request.path = rack.referrer
request
new.call(env)
new.call
new
new.use @app
new = Rack::Builder.new
Rack::Builder.new
Rack::Builder
env['rack.session']
env.keys
env['action_dispatch.routes'].routes
env['action_dispatch.routes'].methods
env['action_dispatch.routes']
env['action_dispatch.routes'].map {|e| e}
env['action_dispatch.routes'].to_yaml
env['action_dispatch.routes'].to_s
env['action_dispatch.routes'].to_a
env['action_dispatch.routes'].inspect
env['action_dispatch.routes'].list
env['action_dispatch.routes']
env.keys
env
env['endpoint']
@current_user
@current_controller
@current_action
c
exit
complete
done
finish
request
self
request.pretty_print self
request.pretty_print 1
request.pretty_print
request.head?
request.head
request.header
request.fetch_header
request.get_header
request.referrer
request.url
request.methods
request.body.size
request.body.read
request.body.present?
request.body.as_json
request.body.methods
request.body.inspect
request.body
request.as_json
request.params
request.methods
endpoint
request.object_id
request.uuid
request.properties
request.referer
request.refer
request.action_controller
request.path
request.pat
request.serializer
request.controller
request.endpoint
request = ::Rack::Request.new env
env['request']
env['endpoint']
continue
ActionController::Base.permitted_to? @current_action, @current_controller, user: @current_user
exit
env['action_controller.instance'].controller_name.to_sym
env['action_controller.instance'].controller_name
env['action_controller.instance'].name
env['action_controller.instance'].action_name
env['action_controller.instance'].action
request.controller.action
request.action
exit
env["action_controller.instance"].current_user
env["action_controller.instance"]
env.keys
env['current_user']
env
env['action_controller']
